1. Donner les commandes docker permettant de:
    a. démarrer un conteneur apache (nommé "a1") en arrière-plan avec redirection de port 8000 vers 80
    b. démarrer un conteneur apache (nommé "a2") en arrière-plan avec redirection de port 8001 vers 80
    c. obtenir les logs du conteneur a2
    d. suivre en temps réel les logs du conteneur a1
    e. arrêter a1 et a2
    f. supprimer a1 et a2
    g. supprimer l'image ayant servi de base aux conteneurs a1 et a2
    h. (re)télécharger l'image ayant servi de base aux conteneurs a1 et a2


2.
Ecrire un script shell (exo1_start.sh) produisant 2 conteneurs redis dans deux versions différentes 
ainsi que 2 conteneurs mysql dans deux versions différentes (attention, variable d'environnement obligatoire MYSQL_ROOT_PASSWORD, -e)
Ecrire le script arrêtant et supprimant ces conteneurs (exo1_destroy.sh)


3. Construire (Dockerfile) une image personnalisée basée sur redis:6.2
Cette image devra disposer des commandes curl, zip et ps.
Lancer un conteneur basé sur cette image.
Vérifier que les commandes curl, zip et ps sont bien embarquées dans le conteneur.


4. "Dockeriser" l'application tp1-exo2.py réalisée durant la formation Python
Donner les commandes permettant de:
    a. construire l'image avec le tag "tp1-exo2:1.0.0"
    b. démarrer un conteneur nommé "exo2" basé sur cette image


5. 
Récupérer les sources situées dans le dossier exos-correction/exo5
Ecrire le Dockerfile permettant de conteneuriser l'application python/flask
Ecrire le fichier docker-compose.yml permettant de déployer localement un service flask et un service mariadb
Faire un build de l'image et la pousser sur le docker hub.

Notes:
- la commande "pip install -r requirements.txt" permet d'installer les dépendances listées dans le fichier requirements.txt